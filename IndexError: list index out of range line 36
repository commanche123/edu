import pickle
import random
import time
import multiprocessing
from collections import deque
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options

from main import db, app, Users, Profiles, Posts, Workers
from trash import trash_links

browser = webdriver.Chrome()

with app.app_context():
    users_deque = deque(db.session.query(Users.competitor, Users.id).all())
    workers_deque = deque(db.session.query(Workers.login, Workers.password).all())

pairs = []


# Формируем пары в виде кортежа ((логин бота, пароль бота), (ulr, id))
def pair():
    while len(pairs) < len(users_deque):
        workers_deque.append(workers_deque[0])
        users_deque.append(users_deque[0])
        pairs.append((workers_deque[0], users_deque[0]))
        workers_deque.popleft()
        users_deque.popleft()


def authorization(*args):
    try:
        browser.get('https://instagram.com')
        for cookie in pickle.load(open(f'cookies/{pairs[0][0]}_cookies', 'rb')):
            browser.add_cookie(cookie)
        time.sleep(random.randrange(6, 10))
        browser.refresh()
        time.sleep(random.randrange(6, 10))

    except FileNotFoundError or FileExistsError:
        time.sleep(random.randrange(2, 4))
        username_input = browser.find_element(By.NAME, 'username')
        username_input.send_keys(pairs[0][0])
        time.sleep(2)
        password_input = browser.find_element(By.NAME, 'password')
        password_input.send_keys(pairs[0][1])
        password_input.send_keys(Keys.ENTER)
        time.sleep(random.randrange(6, 12))
        pickle.dump(browser.get_cookies(), open(f'cookies/{pairs[0][0]}_cookies', 'wb'))
        time.sleep(random.randrange(6, 10))


if __name__ == '__main__':
    pair()
    with multiprocessing.Pool(2) as p:
            p.map(authorization, pairs)
